/** @preserve
 *
 * slippry v1.3.1 - Responsive content slider for jQuery
 * http://slippry.com
 *
 * Authors: Lukas Jakob Hafner - @saftsaak
 *          Thomas Hurd - @SeenNotHurd
 *
 * Copyright 2015, booncon oy - http://booncon.com
 *
 *
 * Released under the MIT license - http://opensource.org/licenses/MIT
 */
//!function(a){"use strict";var b;b={slippryWrapper:'<div class="sy-box" />',slideWrapper:'<div class="sy-slides-wrap" />',slideCrop:'<div class="sy-slides-crop" />',boxClass:"sy-list",elements:"li",activeClass:"sy-active",fillerClass:"sy-filler",loadingClass:"sy-loading",adaptiveHeight:!0,start:1,loop:!0,captionsSrc:"img",captions:"overlay",captionsEl:".sy-caption",initSingle:!0,responsive:!0,preload:"visible",pager:!0,pagerClass:"sy-pager",controls:!0,controlClass:"sy-controls",prevClass:"sy-prev",prevText:"Previous",nextClass:"sy-next",nextText:"Next",hideOnEnd:!0,transition:"fade",kenZoom:120,slideMargin:0,transClass:"transition",speed:800,easing:"swing",continuous:!0,useCSS:!0,auto:!0,autoDirection:"next",autoHover:!0,autoHoverDelay:100,autoDelay:500,pause:4e3,onSliderLoad:function(){return this},onSlideBefore:function(){return this},onSlideAfter:function(){return this}},a.fn.slippry=function(c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A;return e=this,0===e.length?this:e.length>1?(e.each(function(){a(this).slippry(c)}),this):(d={},d.vars={},n=function(){var a,b,c;b=document.createElement("div"),c={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",MSTransition:"msTransitionEnd",OTransition:"oTransitionEnd",transition:"transitionEnd transitionend"};for(a in c)if(void 0!==b.style[a])return c[a]},w=function(){var a=document.createElement("div"),b=["Khtml","Ms","O","Moz","Webkit"],c=b.length;return function(d){if(d in a.style)return!0;for(d=d.replace(/^[a-z]/,function(a){return a.toUpperCase()});c--;)if(b[c]+d in a.style)return!0;return!1}}(),z=function(b,c){var d,e,f,g;return d=c.split("."),e=a(b),f="",g="",a.each(d,function(a,b){b.indexOf("#")>=0?f+=b.replace(/^#/,""):g+=b+" "}),f.length&&e.attr("id",f),g.length&&e.attr("class",a.trim(g)),e},A=function(){var a,b,c,e;c={},e={},a=100-d.settings.kenZoom,e.width=d.settings.kenZoom+"%",d.vars.active.index()%2===0?(e.left=a+"%",e.top=a+"%",c.left="0%",c.top="0%"):(e.left="0%",e.top="0%",c.left=a+"%",c.top=a+"%"),b=d.settings.pause+2*d.settings.speed,d.vars.active.css(e),d.vars.active.animate(c,{duration:b,easing:d.settings.easing,queue:!1})},l=function(){d.vars.fresh?(d.vars.slippryWrapper.removeClass(d.settings.loadingClass),d.vars.fresh=!1,d.settings.auto&&e.startAuto(),d.settings.useCSS||"kenburns"!==d.settings.transition||A(),d.settings.onSliderLoad.call(void 0,d.vars.active.index())):a("."+d.settings.fillerClass,d.vars.slideWrapper).addClass("ready")},q=function(b,c){var e,f,g;e=b/c,f=1/e*100+"%",g=a("."+d.settings.fillerClass,d.vars.slideWrapper),g.css({paddingTop:f}),l()},g=function(b){var c,d;void 0!==a("img",b).attr("src")?a("<img />").load(function(){c=b.width(),d=b.height(),q(c,d)}).attr("src",a("img",b).attr("src")):(c=b.width(),d=b.height(),q(c,d))},f=function(){if(0===a("."+d.settings.fillerClass,d.vars.slideWrapper).length&&d.vars.slideWrapper.append(a('<div class="'+d.settings.fillerClass+'" />')),d.settings.adaptiveHeight===!0)g(a("."+d.settings.activeClass,e));else{var b,c,f;c=0,f=0,a(d.vars.slides).each(function(){a(this).height()>c&&(b=a(this),c=b.height()),f+=1,f===d.vars.count&&(void 0===b&&(b=a(a(d.vars.slides)[0])),g(b))})}},p=function(){d.settings.pager&&(a("."+d.settings.pagerClass+" li",d.vars.slippryWrapper).removeClass(d.settings.activeClass),a(a("."+d.settings.pagerClass+" li",d.vars.slippryWrapper)[d.vars.active.index()]).addClass(d.settings.activeClass))},u=function(){!d.settings.loop&&d.settings.hideOnEnd&&(a("."+d.settings.prevClass,d.vars.slippryWrapper)[d.vars.first?"hide":"show"](),a("."+d.settings.nextClass,d.vars.slippryWrapper)[d.vars.last?"hide":"show"]())},i=function(){var b,c;d.settings.captions!==!1&&(b="img"!==d.settings.captionsSrc?d.vars.active.attr("title"):void 0!==a("img",d.vars.active).attr("title")?a("img",d.vars.active).attr("title"):a("img",d.vars.active).attr("alt"),c="custom"!==d.settings.captions?a(d.settings.captionsEl,d.vars.slippryWrapper):a(d.settings.captionsEl),void 0!==b&&""!==b?c.html(b).show():c.hide())},e.startAuto=function(){void 0===d.vars.timer&&void 0===d.vars.delay&&(d.vars.delay=window.setTimeout(function(){d.vars.autodelay=!1,d.vars.timer=window.setInterval(function(){d.vars.trigger="auto",t(d.settings.autoDirection)},d.settings.pause)},d.vars.autodelay?d.settings.autoHoverDelay:d.settings.autoDelay),d.settings.autoHover&&d.vars.slideWrapper.unbind("mouseenter").unbind("mouseleave").bind("mouseenter",function(){void 0!==d.vars.timer?(d.vars.hoverStop=!0,e.stopAuto()):d.vars.hoverStop=!1}).bind("mouseleave",function(){d.vars.hoverStop&&(d.vars.autodelay=!0,e.startAuto())}))},e.stopAuto=function(){window.clearInterval(d.vars.timer),d.vars.timer=void 0,window.clearTimeout(d.vars.delay),d.vars.delay=void 0},e.refresh=function(){d.vars.slides.removeClass(d.settings.activeClass),d.vars.active.addClass(d.settings.activeClass),d.settings.responsive?f():l(),u(),p(),i()},s=function(){e.refresh()},m=function(){d.vars.moving=!1,d.vars.active.removeClass(d.settings.transClass),d.vars.fresh||d.vars.old.removeClass("sy-ken"),d.vars.old.removeClass(d.settings.transClass),d.settings.onSlideAfter.call(void 0,d.vars.active,d.vars.old.index(),d.vars.active.index()),d.settings.auto&&(d.vars.hoverStop&&void 0!==d.vars.hoverStop||e.startAuto())},r=function(){var b,c,f,g,h,i,j;d.settings.onSlideBefore.call(void 0,d.vars.active,d.vars.old.index(),d.vars.active.index()),d.settings.transition!==!1?(d.vars.moving=!0,"fade"===d.settings.transition||"kenburns"===d.settings.transition?(d.vars.fresh?(d.settings.useCSS?d.vars.slides.css({transitionDuration:d.settings.speed+"ms",opacity:0}):d.vars.slides.css({opacity:0}),d.vars.active.css("opacity",1),"kenburns"===d.settings.transition&&d.settings.useCSS&&(h=d.settings.pause+2*d.settings.speed,d.vars.slides.css({animationDuration:h+"ms"}),d.vars.active.addClass("sy-ken")),m()):d.settings.useCSS?(d.vars.old.addClass(d.settings.transClass).css("opacity",0),d.vars.active.addClass(d.settings.transClass).css("opacity",1),"kenburns"===d.settings.transition&&d.vars.active.addClass("sy-ken"),a(window).off("focus").on("focus",function(){d.vars.moving&&d.vars.old.trigger(d.vars.transition)}),d.vars.old.one(d.vars.transition,function(){return m(),this})):("kenburns"===d.settings.transition&&A(),d.vars.old.addClass(d.settings.transClass).animate({opacity:0},d.settings.speed,d.settings.easing,function(){m()}),d.vars.active.addClass(d.settings.transClass).css("opacity",0).animate({opacity:1},d.settings.speed,d.settings.easing)),s()):("horizontal"===d.settings.transition||"vertical"===d.settings.transition)&&(i="horizontal"===d.settings.transition?"left":"top",b="-"+d.vars.active.index()*(100+d.settings.slideMargin)+"%",d.vars.fresh?(e.css(i,b),m()):(j={},d.settings.continuous&&(!d.vars.jump||"controls"!==d.vars.trigger&&"auto"!==d.vars.trigger||(c=!0,g=b,d.vars.first?(f=0,d.vars.active.css(i,d.vars.count*(100+d.settings.slideMargin)+"%"),b="-"+d.vars.count*(100+d.settings.slideMargin)+"%"):(f=(d.vars.count-1)*(100+d.settings.slideMargin)+"%",d.vars.active.css(i,-(100+d.settings.slideMargin)+"%"),b=100+d.settings.slideMargin+"%"))),d.vars.active.addClass(d.settings.transClass),d.settings.useCSS?(j[i]=b,j.transitionDuration=d.settings.speed+"ms",e.addClass(d.settings.transition),e.css(j),a(window).off("focus").on("focus",function(){d.vars.moving&&e.trigger(d.vars.transition)}),e.one(d.vars.transition,function(){return e.removeClass(d.settings.transition),c&&(d.vars.active.css(i,f),j[i]=g,j.transitionDuration="0ms",e.css(j)),m(),this})):(j[i]=b,e.stop().animate(j,d.settings.speed,d.settings.easing,function(){return c&&(d.vars.active.css(i,f),e.css(i,g)),m(),this}))),s())):(s(),m())},v=function(a){d.vars.first=d.vars.last=!1,"prev"===a||0===a?d.vars.first=!0:("next"===a||a===d.vars.count-1)&&(d.vars.last=!0)},t=function(b){var c,f;d.vars.moving||("auto"!==d.vars.trigger&&e.stopAuto(),c=d.vars.active.index(),"prev"===b?(f=b,c>0?b=c-1:d.settings.loop&&(b=d.vars.count-1)):"next"===b?(f=b,c<d.vars.count-1?b=c+1:d.settings.loop&&(b=0)):(b-=1,f=c>b?"prev":"next"),d.vars.jump=!1,"prev"===b||"next"===b||b===c&&!d.vars.fresh||(v(b),d.vars.old=d.vars.active,d.vars.active=a(d.vars.slides[b]),(0===c&&"prev"===f||c===d.vars.count-1&&"next"===f)&&(d.vars.jump=!0),r()))},e.goToSlide=function(a){d.vars.trigger="external",t(a)},e.goToNextSlide=function(){d.vars.trigger="external",t("next")},e.goToPrevSlide=function(){d.vars.trigger="external",t("prev")},j=function(){if(d.settings.pager&&d.vars.count>1){var b,c,e;for(b=d.vars.slides.length,e=a('<ul class="'+d.settings.pagerClass+'" />'),c=1;b+1>c;c+=1)e.append(a("<li />").append(a('<a href="#'+c+'">'+c+"</a>")));d.vars.slippryWrapper.append(e),a("."+d.settings.pagerClass+" a",d.vars.slippryWrapper).click(function(){return d.vars.trigger="pager",t(parseInt(this.hash.split("#")[1],10)),!1}),p()}},k=function(){d.settings.controls&&d.vars.count>1&&(d.vars.slideWrapper.append(a('<ul class="'+d.settings.controlClass+'" />').append('<li class="'+d.settings.prevClass+'"><a href="#prev">'+d.settings.prevText+"</a></li>").append('<li class="'+d.settings.nextClass+'"><a href="#next">'+d.settings.nextText+"</a></li>")),a("."+d.settings.controlClass+" a",d.vars.slippryWrapper).click(function(){return d.vars.trigger="controls",t(this.hash.split("#")[1]),!1}),u())},o=function(){d.settings.captions!==!1&&("overlay"===d.settings.captions?d.vars.slideWrapper.append(a('<div class="sy-caption-wrap" />').html(z("<div />",d.settings.captionsEl))):"below"===d.settings.captions&&d.vars.slippryWrapper.append(a('<div class="sy-caption-wrap" />').html(z("<div />",d.settings.captionsEl))))},y=function(){t(d.vars.active.index()+1)},x=function(b){var c,e,f,g;return g="all"===d.settings.preload?b:d.vars.active,f=a("img, iframe",g),c=f.length,0===c?void y():(e=0,void f.each(function(){a(this).one("load error",function(){++e===c&&y()}).each(function(){this.complete&&a(this).load()})}))},e.getCurrentSlide=function(){return d.vars.active},e.getSlideCount=function(){return d.vars.count},e.destroySlider=function(){d.vars.fresh===!1&&(e.stopAuto(),d.vars.moving=!1,d.vars.slides.each(function(){void 0!==a(this).data("sy-cssBckup")?a(this).attr("style",a(this).data("sy-cssBckup")):a(this).removeAttr("style"),void 0!==a(this).data("sy-classBckup")?a(this).attr("class",a(this).data("sy-classBckup")):a(this).removeAttr("class")}),void 0!==e.data("sy-cssBckup")?e.attr("style",e.data("sy-cssBckup")):e.removeAttr("style"),void 0!==e.data("sy-classBckup")?e.attr("class",e.data("sy-classBckup")):e.removeAttr("class"),d.vars.slippryWrapper.before(e),d.vars.slippryWrapper.remove(),d.vars.fresh=void 0)},e.reloadSlider=function(){e.destroySlider(),h()},h=function(){var f;return d.settings=a.extend({},b,c),d.vars.slides=a(d.settings.elements,e),d.vars.count=d.vars.slides.length,d.settings.useCSS&&(w("transition")||(d.settings.useCSS=!1),d.vars.transition=n()),e.data("sy-cssBckup",e.attr("style")),e.data("sy-classBackup",e.attr("class")),e.addClass(d.settings.boxClass).wrap(d.settings.slippryWrapper).wrap(d.settings.slideWrapper).wrap(d.settings.slideCrop),d.vars.slideWrapper=e.parent().parent(),d.vars.slippryWrapper=d.vars.slideWrapper.parent().addClass(d.settings.loadingClass),d.vars.fresh=!0,d.vars.slides.each(function(){a(this).addClass("sy-slide "+d.settings.transition),d.settings.useCSS&&a(this).addClass("useCSS"),"horizontal"===d.settings.transition?a(this).css("left",a(this).index()*(100+d.settings.slideMargin)+"%"):"vertical"===d.settings.transition&&a(this).css("top",a(this).index()*(100+d.settings.slideMargin)+"%")}),d.vars.count>1||d.settings.initSingle?(-1===a("."+d.settings.activeClass,e).index()?(f="random"===d.settings.start?Math.round(Math.random()*(d.vars.count-1)):d.settings.start>0&&d.settings.start<=d.vars.count?d.settings.start-1:0,d.vars.active=a(d.vars.slides[f]).addClass(d.settings.activeClass)):d.vars.active=a("."+d.settings.activeClass,e),k(),j(),o(),x(d.vars.slides),void 0):this},h(),this)}}(jQuery);

/** @preserve
 *
 * slippry v1.3.1 - Responsive content slider for jQuery
 * http://slippry.com
 *
 * Authors: Lukas Jakob Hafner - @saftsaak
 *          Thomas Hurd - @SeenNotHurd
 *
 * Copyright 2015, booncon oy - http://booncon.com
 *
 *
 * Released under the MIT license - http://opensource.org/licenses/MIT
 */

(function ($) {
    "use strict";
    var defaults;

    defaults = {
        // general elements & wrapper
        slippryWrapper: '<div class="sy-box" />', // wrapper to wrap everything, including pager
        slideWrapper: '<div class="sy-slides-wrap" />', // wrapper to wrap sildes & controls
        slideCrop: '<div class="sy-slides-crop" />', //additional wrapper around just the slides
        boxClass: 'sy-list', // class that goes to original element
        elements: 'li', // elments cointaining slide content
        activeClass: 'sy-active', // class for current slide
        fillerClass: 'sy-filler', // class for element that acts as intrinsic placholder
        loadingClass: 'sy-loading',

        // options
        adaptiveHeight: true, // height of the sliders adapts to current slide
        start: 1, // num (starting from 1), random
        loop: true, // first -> last & last -> first arrows
        captionsSrc: 'img', // img, el [img takes caption from alt or title, el from title of slide element]
        captions: 'overlay', // Position: overlay, below, custom, false
        captionsEl: '.sy-caption', // $ selector for captions wrapper
        initSingle: true, // initialise even if there is only one slide
        responsive: true,
        preload: 'visible', // visible, all | resources to wait for until showing slider

        // pager
        pager: true,
        pagerClass: 'sy-pager',

        // controls
        controls: true,
        controlClass: 'sy-controls',
        prevClass: 'sy-prev',
        prevText: 'Previous',
        nextClass: 'sy-next',
        nextText: 'Next',
        hideOnEnd: true,

        // transitions
        transition: 'fade', // fade, horizontal, vertical, kenburns, false
        kenZoom: 120, // max zoom for kenburns (in %)
        slideMargin: 0, // spacing between slides (in %)
        transClass: 'transition', // [Class applied to [element] while a transition is taking place.]
        speed: 800, // time the transition takes (ms)
        easing: 'swing', // easing to use in the animation [(see... [jquery www])]
        continuous: true, // seamless first/ last transistion, only works with loop
        useCSS: true, // true, false -> fallback to js if no browser support

        //slideshow
        auto: true,
        autoDirection: 'next',
        autoHover: true,
        autoHoverDelay: 100,
        autoDelay: 500,
        pause: 4000,

        // callback functions
        onSliderLoad: function () { // when slider loaded
            return this;
        },
        onSlideBefore: function () { // before page transition starts
            return this;
        },
        onSlideAfter: function () {  // after page transition happened
            return this;
        }
    };

    $.fn.slippry = function (options) {
        var slip, el, prepareFiller, getFillerProportions, init, updateCaption, initPager, initControls, ready, transitionDone, whichTransitionEvent,
          initCaptions, updatePager, setFillerProportions, doTransition, updateSlide, openSlide, updateControls, updatePos, supports, preload, start, elFromSel, doKens;

        // reference to the object calling the function
        el = this;

        // if no elements just stop
        if (el.length === 0) {
            return this;
        }
        // support mutltiple elements
        if (el.length > 1) {
            el.each(function () {
                $(this).slippry(options);
            });
            return this;
        }

        // variable to access the slider settings across the plugin
        slip = {};
        slip.vars = {};

        whichTransitionEvent = function () { // Thanks! http://stackoverflow.com/a/18672988
            var t, div, transitions;
            div = document.createElement('div');
            transitions = {
                'WebkitTransition': 'webkitTransitionEnd',
                'MozTransition': 'transitionend',
                'MSTransition': 'msTransitionEnd',
                'OTransition': 'oTransitionEnd',
                'transition': 'transitionEnd transitionend'
            };
            for (t in transitions) {
                if (div.style[t] !== undefined) {
                    return transitions[t];
                }
            }
        };

        supports = (function () {  // Thanks! http://net.tutsplus.com/tutorials/html-css-techniques/quick-tip-detect-css-support-in-browsers-with-javascript/
            var div = document.createElement('div'),
              vendors = ['Khtml', 'Ms', 'O', 'Moz', 'Webkit'],
              len = vendors.length;
            return function (prop) {
                if (prop in div.style) {
                    return true;
                }
                prop = prop.replace(/^[a-z]/, function (val) {
                    return val.toUpperCase();
                });
                while (len--) {
                    if (vendors[len] + prop in div.style) {
                        return true;
                    }
                }
                return false;
            };
        }());

        elFromSel = function (sel, prop) {
            var props, newelement, id, className;
            props = prop.split('.');
            newelement = $(sel);
            id = '';
            className = '';
            $.each(props, function (i, val) {
                if (val.indexOf('#') >= 0) {
                    id += val.replace(/^#/, '');
                } else {
                    className += val + ' ';
                }
            });
            if (id.length) {
                newelement.attr('id', id);
            }
            if (className.length) {
                newelement.attr('class', $.trim(className));
            }
            return newelement;
        };

        doKens = function () {
            var kenStart, kenTime, animProp, cssProp;
            animProp = {};
            cssProp = {};
            kenStart = 100 - slip.settings.kenZoom;
            cssProp.width = slip.settings.kenZoom + '%';
            if (slip.vars.active.index() % 2 === 0) {
                cssProp.left = kenStart + '%';
                cssProp.top = kenStart + '%';
                animProp.left = '0%';
                animProp.top = '0%';
            } else {
                cssProp.left = '0%';
                cssProp.top = '0%';
                animProp.left = kenStart + '%';
                animProp.top = kenStart + '%';
            }
            kenTime = slip.settings.pause + slip.settings.speed * 2;
            slip.vars.active.css(cssProp);
            slip.vars.active.animate(animProp, { duration: kenTime, easing: slip.settings.easing, queue: false });
        };

        ready = function () {
            if (slip.vars.fresh) {
                slip.vars.slippryWrapper.removeClass(slip.settings.loadingClass);
                slip.vars.fresh = false;
                if (slip.settings.auto) {
                    el.startAuto();
                }
                if (!slip.settings.useCSS && slip.settings.transition === 'kenburns') {
                    doKens();
                }
                slip.settings.onSliderLoad.call(undefined, slip.vars.active.index());
            } else {
                $('.' + slip.settings.fillerClass, slip.vars.slideWrapper).addClass('ready');
            }
        };

        setFillerProportions = function (width, height) {
            var ratio, p_top, $filler;
            ratio = width / height;
            p_top = 1 / ratio * 100 + '%';  //cool intrinsic trick: http://alistapart.com/article/creating-intrinsic-ratios-for-video
            $filler = $('.' + slip.settings.fillerClass, slip.vars.slideWrapper);
            $filler.css({ paddingTop: p_top }); // resizing without the need of js, true responsiveness :)
            ready();
        };

        // gets the aspect ratio of the filler element
        getFillerProportions = function ($slide) {
            var width, height;
            if (($('img', $slide).attr("src") !== undefined)) {
                $("<img />").load(function () {
                    width = $slide.width();
                    height = $slide.height();
                    setFillerProportions(width, height);
                }).attr("src", $('img', $slide).attr("src"));
            } else {
                width = $slide.width();
                height = $slide.height();
                setFillerProportions(width, height);
            }
        };

        // prepares a div to occupy the needed space
        prepareFiller = function () {
            if ($('.' + slip.settings.fillerClass, slip.vars.slideWrapper).length === 0) {
                slip.vars.slideWrapper.append($('<div class="' + slip.settings.fillerClass + '" />'));
            }
            if (slip.settings.adaptiveHeight === true) {  // if the slides shoud alwas adapt to their content
                getFillerProportions($('.' + slip.settings.activeClass, el));  // set the filler height on the active element
            } else {  // otherwise get the highest element
                var $highest, height, loop;
                height = 0;
                loop = 0;
                $(slip.vars.slides).each(function () {
                    if ($(this).height() > height) {
                        $highest = $(this);
                        height = $highest.height();
                    }
                    loop = loop + 1;
                    if (loop === slip.vars.count) {
                        if ($highest === undefined) {
                            $highest = $($(slip.vars.slides)[0]);
                        }
                        getFillerProportions($highest);
                    }
                });
            }
        };

        updatePager = function () {
            if (slip.settings.pager) {
                $('.' + slip.settings.pagerClass + ' li', slip.vars.slippryWrapper).removeClass(slip.settings.activeClass);
                $($('.' + slip.settings.pagerClass + ' li', slip.vars.slippryWrapper)[slip.vars.active.index()]).addClass(slip.settings.activeClass);
            }
        };

        updateControls = function () {
            if (!slip.settings.loop && slip.settings.hideOnEnd) {
                $('.' + slip.settings.prevClass, slip.vars.slippryWrapper)[slip.vars.first ? 'hide' : 'show']();
                $('.' + slip.settings.nextClass, slip.vars.slippryWrapper)[slip.vars.last ? 'hide' : 'show']();
            }
        };

        updateCaption = function () {
            var caption, wrapper;
            if (slip.settings.captions !== false) {
                if (slip.settings.captionsSrc !== 'img') {
                    caption = slip.vars.active.attr('title');
                } else {
                    caption = $('img', slip.vars.active).attr('title') !== undefined ? $('img', slip.vars.active).attr('title') : $('img', slip.vars.active).attr('alt');
                }
                if (slip.settings.captions !== 'custom') {
                    wrapper = $(slip.settings.captionsEl, slip.vars.slippryWrapper);
                } else {
                    wrapper = $(slip.settings.captionsEl);
                }
                if ((caption !== undefined) && (caption !== '')) {
                    wrapper.html(caption).show();
                } else {
                    wrapper.hide();
                }
            }
        };

        el.startAuto = function () {
            if ((slip.vars.timer === undefined) && (slip.vars.delay === undefined)) {
                slip.vars.delay = window.setTimeout(function () {
                    slip.vars.autodelay = false;
                    slip.vars.timer = window.setInterval(function () {
                        slip.vars.trigger = 'auto';
                        openSlide(slip.settings.autoDirection);
                    }, slip.settings.pause);
                }, slip.vars.autodelay ? slip.settings.autoHoverDelay : slip.settings.autoDelay);
                if (slip.settings.autoHover) {
                    slip.vars.slideWrapper.unbind('mouseenter').unbind('mouseleave').bind('mouseenter', function () {
                        if (slip.vars.timer !== undefined) {
                            slip.vars.hoverStop = true;
                            el.stopAuto();
                        } else {
                            slip.vars.hoverStop = false;
                        }
                    }).bind('mouseleave', function () {
                        if (slip.vars.hoverStop) {
                            slip.vars.autodelay = true;
                            el.startAuto();
                        }
                    });
                }
            }
        };

        el.stopAuto = function () {
            window.clearInterval(slip.vars.timer);
            slip.vars.timer = undefined;
            window.clearTimeout(slip.vars.delay);
            slip.vars.delay = undefined;
        };

        // refreshes the already initialised slider
        el.refresh = function () {
            slip.vars.slides.removeClass(slip.settings.activeClass);
            slip.vars.active.addClass(slip.settings.activeClass);
            if (slip.settings.responsive) {
                prepareFiller();
            } else {
                ready();
            }
            updateControls();
            updatePager();
            updateCaption();
        };

        updateSlide = function () {
            el.refresh();
        };

        transitionDone = function () {
            slip.vars.moving = false;
            slip.vars.active.removeClass(slip.settings.transClass);
            if (!slip.vars.fresh) {
                slip.vars.old.removeClass('sy-ken');
            }
            slip.vars.old.removeClass(slip.settings.transClass);
            slip.settings.onSlideAfter.call(undefined, slip.vars.active, slip.vars.old.index(), slip.vars.active.index());
            if (slip.settings.auto) {
                if (!slip.vars.hoverStop || slip.vars.hoverStop === undefined) {
                    el.startAuto();
                }
            }
        };

        doTransition = function () {
            var pos, jump, old_left, old_pos, kenTime, ref, cssProp;
            slip.settings.onSlideBefore.call(undefined, slip.vars.active, slip.vars.old.index(), slip.vars.active.index());
            if (slip.settings.transition !== false) {
                slip.vars.moving = true;
                if ((slip.settings.transition === 'fade') || (slip.settings.transition === 'kenburns')) {
                    if (slip.vars.fresh) {
                        if (slip.settings.useCSS) {
                            slip.vars.slides.css({ transitionDuration: slip.settings.speed + 'ms', opacity: 0 });
                        } else {
                            slip.vars.slides.css({ opacity: 0 });
                        }
                        slip.vars.active.css('opacity', 1);
                        if (slip.settings.transition === 'kenburns') {
                            if (slip.settings.useCSS) {
                                kenTime = slip.settings.pause + slip.settings.speed * 2;
                                slip.vars.slides.css({ animationDuration: kenTime + 'ms' });
                                slip.vars.active.addClass('sy-ken');
                            }
                        }
                        transitionDone();
                    } else {
                        if (slip.settings.useCSS) {
                            slip.vars.old.addClass(slip.settings.transClass).css('opacity', 0);
                            slip.vars.active.addClass(slip.settings.transClass).css('opacity', 1);
                            if (slip.settings.transition === 'kenburns') {
                                slip.vars.active.addClass('sy-ken');
                            }
                            $(window).off('focus').on('focus', function () { // bugfix for safari 7 which doesn't always trigger ontransitionend when switching tab
                                if (slip.vars.moving) {
                                    slip.vars.old.trigger(slip.vars.transition);
                                }
                            });
                            slip.vars.old.one(slip.vars.transition, function () {
                                transitionDone();
                                return this;
                            });
                        } else {
                            if (slip.settings.transition === 'kenburns') {
                                doKens();
                            }
                            slip.vars.old.addClass(slip.settings.transClass).animate({
                                opacity: 0
                            }, slip.settings.speed, slip.settings.easing, function () {
                                transitionDone();
                            });
                            slip.vars.active.addClass(slip.settings.transClass).css('opacity', 0).animate({
                                opacity: 1
                            }, slip.settings.speed, slip.settings.easing);
                        }
                    }
                    updateSlide();
                } else if ((slip.settings.transition === 'horizontal') || (slip.settings.transition === 'vertical')) {
                    ref = (slip.settings.transition === 'horizontal') ? 'left' : 'top';
                    pos = '-' + slip.vars.active.index() * (100 + slip.settings.slideMargin) + '%';
                    if (slip.vars.fresh) {
                        el.css(ref, pos);
                        transitionDone();
                    } else {
                        cssProp = {};
                        if (slip.settings.continuous) {
                            if (slip.vars.jump && ((slip.vars.trigger === 'controls') || (slip.vars.trigger === 'auto'))) {
                                jump = true;
                                old_pos = pos;
                                if (slip.vars.first) {
                                    old_left = 0;
                                    slip.vars.active.css(ref, slip.vars.count * (100 + slip.settings.slideMargin) + '%');
                                    pos = '-' + slip.vars.count * (100 + slip.settings.slideMargin) + '%';
                                } else {
                                    old_left = (slip.vars.count - 1) * (100 + slip.settings.slideMargin) + '%';
                                    slip.vars.active.css(ref, -(100 + slip.settings.slideMargin) + '%');
                                    pos = (100 + slip.settings.slideMargin) + '%';
                                }
                            }
                        }
                        slip.vars.active.addClass(slip.settings.transClass);
                        if (slip.settings.useCSS) {
                            cssProp[ref] = pos;
                            cssProp.transitionDuration = slip.settings.speed + 'ms';
                            el.addClass(slip.settings.transition);
                            el.css(cssProp);
                            $(window).off('focus').on('focus', function () { // bugfix for safari 7 which doesn't always trigger ontransitionend when switching tab
                                if (slip.vars.moving) {
                                    el.trigger(slip.vars.transition);
                                }
                            });
                            el.one(slip.vars.transition, function () {
                                el.removeClass(slip.settings.transition);
                                if (jump) {
                                    slip.vars.active.css(ref, old_left);
                                    cssProp[ref] = old_pos;
                                    cssProp.transitionDuration = '0ms';
                                    el.css(cssProp);
                                }
                                transitionDone();
                                return this;
                            });
                        } else {
                            cssProp[ref] = pos;
                            el.stop().animate(cssProp, slip.settings.speed, slip.settings.easing, function () {
                                if (jump) {
                                    slip.vars.active.css(ref, old_left);
                                    el.css(ref, old_pos);
                                }
                                transitionDone();
                                return this;
                            });
                        }
                    }
                    updateSlide();
                }
            } else {
                updateSlide();
                transitionDone();
            }
        };

        updatePos = function (slide) {
            slip.vars.first = slip.vars.last = false;
            if ((slide === 'prev') || (slide === 0)) {
                slip.vars.first = true;
            } else if ((slide === 'next') || (slide === slip.vars.count - 1)) {
                slip.vars.last = true;
            }
        };

        openSlide = function (slide) {           
                var current, direction;
                if (!slip.vars.moving) {
                    if (slip.vars.trigger !== 'auto') {
                        el.stopAuto();
                    }
                    current = slip.vars.active.index();
                    if (slide === 'prev') {
                        direction = slide;
                        if (current > 0) {
                            slide = current - 1;
                        } else if (slip.settings.loop) {
                            slide = slip.vars.count - 1;
                        }
                    } else if (slide === 'next') {
                        //setTimeout(function () {
                            direction = slide;
                            if (current < slip.vars.count - 1) {
                                slide = current + 1;
                            } else if (slip.settings.loop) {
                                slide = 0;
                            }
                        //},2000);
                    } else {
                        slide = slide - 1;
                        direction = slide < current ? 'prev' : 'next';
                    }
                    slip.vars.jump = false;

                    if ((slide !== 'prev') && (slide !== 'next') && ((slide !== current) || (slip.vars.fresh))) {
                        updatePos(slide);
                        slip.vars.old = slip.vars.active;
                        slip.vars.active = $(slip.vars.slides[slide]);
                        if (((current === 0) && (direction === 'prev')) || ((current === slip.vars.count - 1) && (direction === 'next'))) {
                            slip.vars.jump = true;
                        }
                        doTransition();
                    }
                }
            
        };

        el.goToSlide = function (slide) {
            slip.vars.trigger = 'external';
            openSlide(slide);
        };

        el.goToNextSlide = function () {
            slip.vars.trigger = 'external';
            openSlide('next');
        };

        el.goToPrevSlide = function () {
            slip.vars.trigger = 'external';
            openSlide('prev');
        };

        initPager = function () {
            if ((slip.settings.pager) && (slip.vars.count > 1)) {
                var count, loop, pager;
                count = slip.vars.slides.length;
                pager = $('<ul class="' + slip.settings.pagerClass + '" />');
                for (loop = 1; loop < count + 1; loop = loop + 1) {
                    pager.append($('<li />').append($('<a href="#' + loop + '">' + loop + '</a>')));
                }
                slip.vars.slippryWrapper.append(pager);
                $('.' + slip.settings.pagerClass + ' a', slip.vars.slippryWrapper).click(function () {
                    slip.vars.trigger = 'pager';
                    openSlide(parseInt(this.hash.split('#')[1], 10));
                    return false;
                });
                updatePager();
            }
        };

        initControls = function () {
            if ((slip.settings.controls) && (slip.vars.count > 1)) {
                slip.vars.slideWrapper.append(
                  $('<ul class="' + slip.settings.controlClass + '" />')
                    .append('<li class="' + slip.settings.prevClass + '"><a href="#prev">' + slip.settings.prevText + '</a></li>')
                    .append('<li class="' + slip.settings.nextClass + '"><a href="#next">' + slip.settings.nextText + '</a></li>')
                );
                $('.' + slip.settings.controlClass + ' a', slip.vars.slippryWrapper).click(function () {
                    slip.vars.trigger = 'controls';
                    openSlide(this.hash.split('#')[1]);
                    return false;
                });
                updateControls();
            }
        };

        initCaptions = function () {
            if (slip.settings.captions !== false) {
                if (slip.settings.captions === 'overlay') {
                    slip.vars.slideWrapper.append($('<div class="sy-caption-wrap" />').html(elFromSel('<div />', slip.settings.captionsEl)));
                } else if (slip.settings.captions === 'below') {
                    slip.vars.slippryWrapper.append($('<div class="sy-caption-wrap" />').html(elFromSel('<div />', slip.settings.captionsEl)));
                }
            }
        };

        // actually show the first slide
        start = function () {
            openSlide(slip.vars.active.index() + 1);
        };

        // wait for images, iframes to be loaded
        preload = function (slides) {
            var count, loop, elements, container;
            container = (slip.settings.preload === 'all') ? slides : slip.vars.active;
            elements = $('img, iframe', container);
            count = elements.length;
            if (count === 0) {
                start();
                return;
            }
            loop = 0;
            elements.each(function () {
                $(this).one('load error', function () {
                    if (++loop === count) {
                        start();
                    }
                }).each(function () {
                    if (this.complete) {
                        $(this).load();
                    }
                });
            });
        };

        el.getCurrentSlide = function () {
            return slip.vars.active;
        };

        el.getSlideCount = function () {
            return slip.vars.count;
        };

        el.destroySlider = function () {
            if (slip.vars.fresh === false) {
                el.stopAuto();
                slip.vars.moving = false;
                slip.vars.slides.each(function () {
                    if ($(this).data("sy-cssBckup") !== undefined) {
                        $(this).attr("style", $(this).data("sy-cssBckup"));
                    } else {
                        $(this).removeAttr('style');
                    }
                    if ($(this).data("sy-classBckup") !== undefined) {
                        $(this).attr("class", $(this).data("sy-classBckup"));
                    } else {
                        $(this).removeAttr('class');
                    }
                });
                if (el.data("sy-cssBckup") !== undefined) {
                    el.attr("style", el.data("sy-cssBckup"));
                } else {
                    el.removeAttr('style');
                }
                if (el.data("sy-classBckup") !== undefined) {
                    el.attr("class", el.data("sy-classBckup"));
                } else {
                    el.removeAttr('class');
                }
                slip.vars.slippryWrapper.before(el);
                slip.vars.slippryWrapper.remove();
                slip.vars.fresh = undefined;
            }
        };

        el.reloadSlider = function () {
            el.destroySlider();
            init();
        };

        // initialises the slider, creates needed markup
        init = function () {
            var first;
            slip.settings = $.extend({}, defaults, options);
            slip.vars.slides = $(slip.settings.elements, el);
            slip.vars.count = slip.vars.slides.length;
            if (slip.settings.useCSS) { // deactivate css transitions on unsupported browsers
                if (!supports('transition')) {
                    slip.settings.useCSS = false;
                }
                slip.vars.transition = whichTransitionEvent();
            }
            el.data('sy-cssBckup', el.attr('style'));
            el.data('sy-classBackup', el.attr('class'));
            el.addClass(slip.settings.boxClass).wrap(slip.settings.slippryWrapper).wrap(slip.settings.slideWrapper).wrap(slip.settings.slideCrop);
            slip.vars.slideWrapper = el.parent().parent();
            slip.vars.slippryWrapper = slip.vars.slideWrapper.parent().addClass(slip.settings.loadingClass);
            slip.vars.fresh = true;
            slip.vars.slides.each(function () {
                $(this).addClass('sy-slide ' + slip.settings.transition);
                if (slip.settings.useCSS) {
                    $(this).addClass('useCSS');
                }
                if (slip.settings.transition === 'horizontal') {
                    $(this).css('left', $(this).index() * (100 + slip.settings.slideMargin) + '%');
                } else if (slip.settings.transition === 'vertical') {
                    $(this).css('top', $(this).index() * (100 + slip.settings.slideMargin) + '%');
                }
            });
            if ((slip.vars.count > 1) || (slip.settings.initSingle)) {
                if ($('.' + slip.settings.activeClass, el).index() === -1) {
                    if (slip.settings.start === 'random') {
                        first = Math.round(Math.random() * (slip.vars.count - 1));
                    } else if (slip.settings.start > 0 && slip.settings.start <= slip.vars.count) {
                        first = slip.settings.start - 1;
                    } else {
                        first = 0;
                    }
                    slip.vars.active = $(slip.vars.slides[first]).addClass(slip.settings.activeClass);
                } else {
                    slip.vars.active = $('.' + slip.settings.activeClass, el);
                }
                initControls();
                initPager();
                initCaptions();
                preload(slip.vars.slides);
            } else {
                return this;
            }
        };

        init(); // on startup initialise the slider

        return this;
    };
}(jQuery));
